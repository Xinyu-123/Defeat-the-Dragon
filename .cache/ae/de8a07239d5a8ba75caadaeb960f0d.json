{"id":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","dependencies":[{"name":"C:\\Users\\xinyu\\OneDrive\\Desktop\\summer\\Projects\\RPG\\dragon_js\\package.json","includedInParent":true,"mtime":1590349677951},{"name":"C:\\Users\\xinyu\\OneDrive\\Desktop\\summer\\Projects\\RPG\\dragon_js\\node_modules\\jsdom\\package.json","includedInParent":true,"mtime":1590349677436}],"generated":{"js":"\"use strict\"; // This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar EventModifierMixinImpl = /*#__PURE__*/function () {\n  function EventModifierMixinImpl() {\n    _classCallCheck(this, EventModifierMixinImpl);\n  }\n\n  _createClass(EventModifierMixinImpl, [{\n    key: \"getModifierState\",\n    // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n    // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n    // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n    // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n    // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n    // extra checking for validity.\n    value: function getModifierState(keyArg) {\n      return Boolean(this[\"modifier\".concat(keyArg)]);\n    }\n  }]);\n\n  return EventModifierMixinImpl;\n}();\n\nexports.implementation = EventModifierMixinImpl;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":14},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":3,"column":0}},{"generated":{"line":2,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":4,"column":0}},{"name":"EventModifierMixinImpl","generated":{"line":10,"column":4},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":6,"column":6}},{"generated":{"line":17,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":7,"column":2}},{"generated":{"line":18,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":8,"column":2}},{"generated":{"line":19,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":9,"column":2}},{"generated":{"line":20,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":10,"column":2}},{"generated":{"line":21,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":11,"column":2}},{"generated":{"line":22,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":12,"column":2}},{"name":"keyArg","generated":{"line":23,"column":37},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":13,"column":19}},{"generated":{"line":23,"column":45},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":13,"column":27}},{"generated":{"line":24,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":4}},{"name":"Boolean","generated":{"line":24,"column":13},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":11}},{"generated":{"line":24,"column":20},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":18}},{"generated":{"line":24,"column":21},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":19}},{"name":"keyArg","generated":{"line":24,"column":44},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":35}},{"generated":{"line":24,"column":50},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":19}},{"generated":{"line":24,"column":52},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":18}},{"generated":{"line":24,"column":53},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":4}},{"generated":{"line":25,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":15,"column":3}},{"name":"exports","generated":{"line":31,"column":0},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":0}},{"generated":{"line":31,"column":7},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":7}},{"name":"implementation","generated":{"line":31,"column":8},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":8}},{"generated":{"line":31,"column":22},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":0}},{"name":"EventModifierMixinImpl","generated":{"line":31,"column":25},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":25}},{"generated":{"line":31,"column":47},"source":"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":0}}],"sources":{"../node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js":"\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\n\nexports.implementation = EventModifierMixinImpl;\n"},"lineCount":null}},"error":null,"hash":"a0e0554f7ed6541af4c11accfd8f9b35","cacheData":{"env":{}}}